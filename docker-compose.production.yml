services:
  # IPFS/Kubo Service
  kubo:
    image: ipfs/kubo:latest
    container_name: kubo
    networks:
      - app_network
    ports:
      - "5001:5001"   # API
      - "8080:8080"   # Gateway
      - "4001:4001"   # Swarm
    volumes:
      - ./data:/data 
    environment:
      - IPFS_PROFILE=server
    command: daemon --migrate=true --agent-version-suffix=docker
    restart: unless-stopped

  # OrbitDB Service
  orbitdb:
    build:
      context: ./server/orbitdb-service
    container_name: orbitdb
    networks:
      - app_network
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - kubo
    restart: unless-stopped

  # Go Server
  go-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: go-server
    networks:
      - app_network
    ports:
      - "8081:80"  # Exposer sur le port 8081 pour Ã©viter les conflits
    environment:
      - IPFS_API_URL=http://kubo:5001
      - ORBITDB_API_URL=http://orbitdb:3000
      - ALLOWED_ORIGIN=${ALLOWED_ORIGIN:-https://api.bulb.social}
    depends_on:
      - kubo
      - orbitdb
    restart: unless-stopped

  # Client React
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
      - VITE_API_URL=${VITE_API_URL:-https://api.bulb.social}
    container_name: bulb-client
    networks:
      - app_network
    ports:
      - "80:80"     # Servir le client sur le port 80 standard
    depends_on:
      - go-server
    restart: unless-stopped

networks:
  app_network:
    name: app_network
    driver: bridge

volumes:
  ipfs_data:
    driver: local
