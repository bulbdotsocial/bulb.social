// Test script pour valider l'int√©gration Privy + MetaMask
// √Ä ex√©cuter dans la console du navigateur pour d√©bugger

console.log('üß™ Test de l\'int√©gration Wallet');

// Test 1: V√©rifier la pr√©sence de Privy
try {
    const privyExists = typeof window.Privy !== 'undefined';
    console.log('‚úÖ Privy disponible:', privyExists);
} catch (e) {
    console.log('‚ùå Erreur Privy:', e);
}

// Test 2: V√©rifier MetaMask
try {
    const metamaskExists = typeof window.ethereum !== 'undefined';
    console.log('‚úÖ MetaMask disponible:', metamaskExists);
    if (window.ethereum) {
        console.log('   - Provider:', window.ethereum.isMetaMask ? 'MetaMask' : 'Autre');
    }
} catch (e) {
    console.log('‚ùå Erreur MetaMask:', e);
}

// Test 3: V√©rifier la configuration des cha√Ænes
try {
    const flowTestnetConfig = {
        chainId: 0x221,
        chainName: 'Flow Testnet',
        rpcUrls: ['https://testnet.evm.nodes.onflow.org'],
    };
    console.log('‚úÖ Configuration Flow Testnet:', flowTestnetConfig);
} catch (e) {
    console.log('‚ùå Erreur configuration:', e);
}

// Test 4: Fonction pour tester la connexion wallet
window.testWalletConnection = async () => {
    console.log('üîó Test de connexion wallet...');

    try {
        // Test avec MetaMask si disponible
        if (window.ethereum) {
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            console.log('‚úÖ Comptes MetaMask:', accounts);

            const chainId = await window.ethereum.request({ method: 'eth_chainId' });
            console.log('‚úÖ Cha√Æne actuelle:', parseInt(chainId, 16));
        }
    } catch (e) {
        console.log('‚ùå Erreur connexion:', e);
    }
};

// Test 5: Fonction pour tester le changement de r√©seau
window.testNetworkSwitch = async () => {
    console.log('üîÑ Test changement vers Flow Testnet...');

    try {
        if (window.ethereum) {
            await window.ethereum.request({
                method: 'wallet_switchEthereumChain',
                params: [{ chainId: '0x221' }],
            });
            console.log('‚úÖ Changement de r√©seau r√©ussi');
        }
    } catch (e) {
        if (e.code === 4902) {
            console.log('‚ö†Ô∏è R√©seau non ajout√©, tentative d\'ajout...');
            try {
                await window.ethereum.request({
                    method: 'wallet_addEthereumChain',
                    params: [{
                        chainId: '0x221',
                        chainName: 'Flow Testnet',
                        rpcUrls: ['https://testnet.evm.nodes.onflow.org'],
                        nativeCurrency: {
                            name: 'Flow',
                            symbol: 'FLOW',
                            decimals: 18,
                        },
                        blockExplorerUrls: ['https://evm-testnet.flowscan.io'],
                    }],
                });
                console.log('‚úÖ R√©seau ajout√© avec succ√®s');
            } catch (addError) {
                console.log('‚ùå Erreur ajout r√©seau:', addError);
            }
        } else {
            console.log('‚ùå Erreur changement r√©seau:', e);
        }
    }
};

console.log('');
console.log('üöÄ Commandes disponibles:');
console.log('  - testWalletConnection() : Tester la connexion wallet');
console.log('  - testNetworkSwitch() : Tester le changement vers Flow Testnet');
console.log('');
console.log('üí° Utilisez ces commandes pour d√©bugger votre int√©gration wallet');
